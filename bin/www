#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('project-3:server');
var http = require('http');
var mongoose = require("mongoose");
mongoose.Promise = global.Promise;

async function main() {
  const dbUrl = process.env.MONGODB_URI || "mongodb://root:password1@ds139934.mlab.com:39934/heroku_09wrn10w";
  console.log('Connecting to MongoDB using: ', dbUrl);
  try {
    // Connnect to MongoDB
    await mongoose.connect(dbUrl, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    // Start Server
    var port = normalizePort(process.env.PORT || '5000');
    console.log('************* RUNNING ON PORT: ', port);
    app.set('port', port);
    var server = http.createServer(app);
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  } catch (err) {
    console.log('FAILED TO CONNECT TO MONGO DB', err);
    process.exit(2);
  }

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log('*********** STARTED SERVER ************');
  }
}




// Start the connection to MongoDB and then start server
main();