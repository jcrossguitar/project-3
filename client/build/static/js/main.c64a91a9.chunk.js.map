{"version":3,"sources":["logo.svg","components/About/About.component.js","utils/API.js","pages/CheeseDetail/CheeseDetail.component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","About","API","cheeseId","axios","get","CheeseDetail","props","state","cheese","name","price","description","id","this","match","params","getCheeseByID","then","setState","catch","err","console","log","React","Component","App","exact","path","component","Home","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wLAAAA,EAAOC,QAAU,IAA0B,kC,qICU5BC,MARf,WACI,OACI,6BACI,kD,uDCHSC,E,2GACIC,GACjB,OAAOC,IAAMC,IAAN,oCAAuCF,Q,KCDzCG,EAAb,YACI,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,OAAQ,CACJC,KAAM,YACNC,MAAO,EACPC,YAAa,sBANN,EADvB,iFAYyB,IAAD,OAEZC,EACAC,KAAKP,MAAMQ,MAAMC,OADjBH,GAEAA,GACAX,EAAIe,cAAcJ,GAAIK,MAAK,SAAAT,GACvB,EAAKU,SAAS,CACVV,cAIPW,OAAM,SAAAC,GACHC,QAAQC,IAAR,0CAA+CV,GAAMQ,GACrD,EAAKF,SAAS,CACVV,OAAQ,CACRC,KAAM,gBACNC,MAAO,IACPC,YAAa,+BA7BjC,+BAwCQ,OACI,6BACA,uDAA6BE,KAAKP,MAAMQ,MAAMC,OAAOH,IAAM,WAC3D,uDAA6BC,KAAKN,MAAMC,OAAOC,KAA/C,OAA0DI,KAAKN,MAAMC,OAAOE,MAAQ,KACpF,2BAAKG,KAAKN,MAAMC,OAAOG,kBA5CnC,GAAkCY,IAAMC,WCqBzBC,MAbf,WACE,OACA,kBAAC,IAAD,KACE,gCACE,2BAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,SACjC,2BAAOH,OAAK,EAACC,KAAK,SAASC,UAAW5B,IACtC,2BAAO0B,OAAK,EAACC,KAAK,aAAaC,UAAWvB,OCL5ByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2D,MCVNoB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.c64a91a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\n\r\nfunction About() {\r\n    return (\r\n        <div>\r\n            <h1>Hello from about</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About","import axios from 'axios';\r\n\r\nexport default class API {\r\n    static getCheeseByID(cheeseId) {\r\n        return axios.get(`localhost:5000/api/cheese/${cheeseId}`);\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport API from '../../utils/API';\r\n\r\nexport class CheeseDetail extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            cheese: {\r\n                name: \"No Cheese\",\r\n                price: 0,\r\n                description: \"nothing purchased\",\r\n                }        \r\n            };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {\r\n            id\r\n        } = this.props.match.params;\r\n        if (id) {\r\n            API.getCheeseByID(id).then(cheese => {\r\n                this.setState({\r\n                    cheese,                \r\n                });\r\n            })\r\n\r\n            .catch(err => {\r\n                console.log(`ERR - could not load cheese id: ${id}`, err);\r\n                this.setState({\r\n                    cheese: {\r\n                    name: \"Smelly cheese\",\r\n                    price: 1000,\r\n                    description: \"the stinkiest of all\",\r\n                    }\r\n                })\r\n\r\n            });\r\n        }\r\n\r\n        // API.getCheeseByID()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <h1>Welcome to CheeseDetail {this.props.match.params.id || \"Unknown\"}</h1>\r\n            <h2>Welcome to CheeseDetail {this.state.cheese.name } - ${this.state.cheese.price / 100 }</h2>\r\n            <p>{ this.state.cheese.description }</p>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { Home } from './components/Home/Home.component';\n\nimport About  from './components/About/About.component.js';\nimport { Alert } from 'reactstrap';\n// import { NoMatch } from './components/NoMatch/index.js';\nimport { CheeseDetail } from './pages/CheeseDetail/CheeseDetail.component';\n\nfunction App() {\n  return (\n  <Router>\n    <switch>\n      <route exact path=\"/\" component={Home} />\n      <route exact path=\"/about\" component={About} />\n      <route exact path=\"/cheese:id\" component={CheeseDetail} />\n      {/* <route component={NoMatch} /> */}\n    </switch>\n  </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}